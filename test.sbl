# Example program
# factorial
import "basic.sbl"
import "io.sbl"

fact {
    # duplicate and compare to zero
    ^ 0 ==
    br {
        .@
        # pop off to nothing, and push a 1
        .@ 1
    }
    el {
        .@
        .x       # pop into x
        x 1 -    # push a copy and subtract 1 from it
        fact     # call factorial
        x *     # multiply whatever our factorial is by x
    }
}

square { ^ * }
cube { ^ ^ * * }

test-numbers {
    @
    1 2 3 4 5
    loop {
        fact !println
    }

    1 2 3 4 5
    loop {
        square "square is " !print !println
    }
    
     -1 -2 -3 -4 -5
    loop {
        cube "cube is " !print !println
    }
    .@

    "printing numbers of different bases" !println

    "0b101010 = " !print 0b101010 !println
    "0o1000 = " !print 0o1000 !println
    "0x1000 = " !print 0x1000 !println
}

test-printing {
    @ '\n 'o 'l 'l 'e 'h
    loop { !print }
    "world!" !println
}

test-booleans {
    5 u- ^ .l .r
    l r ==
    br {
        l !print " == " !print r !println
    }

    T
    br {
        "br block" !println
        !print " value is on top of the stack" !println
        .@
    }
    F
    br {} el {
        "el block" !println
        !print " value is on top of the stack" !println
        .@
    }
}

test-stacks {
    # do weird things with internal stacks
    12 .a 34 .b
    [a b] .c [c 555 [1 2 3]] !println

    [1 2 3 4 5]
    ^len 0 > 
    loop {
        .@
        ^pop !println
        ^len 0 >
    }
    .2 # clean up the stack
    "I'm going to spell a word!" !println
    []
    's ^push
    'u ^push
    'o ^push
    'u ^push
    'c ^push
    'o ^push
    'n ^push
    'n ^push
    'i ^push
    T
    loop {
        .@
        ^pop !print
        ^len 0 >
    }
    .2 "" !println

    "Here's a number, spelled out with individual characters from a local stack:"
        !println
    [ '9 '5 '1 '4 '1 '. '3 ]  # create a stack with some characters
    T  # initial truth value to start the loop
    loop {
        .@  # discard boolean
        ^pop !print  # pop the top item off the local stack, and print it
        ^len 0 >  # compare the length
    }
    .2 "" !println  # discard the boolean and empty stack and print a newline

    # Yo dawg, I heard you like stacks, so we put stacks in your stacks so you
    # can stack while you stack
    [
        [1 2]
        [1 3]
        [4 2]
    ]
    "these are the coordinates:" !println
    T
    loop {
        .@
        ^pop  # get the coordinate
            ^pop !print
            ", " !print
            ^pop !print
        .@
        "" !println
        ^len 0 >
    }
    .2
}

main {
    "testing number functions" !println
    "-----" !println
    test-numbers

    "\n==========\n" !println

    "testing printing functions" !println
    "-----" !println
    test-printing

    "\n==========\n" !println

    "testing booleans" !println
    "-----" !println
    test-booleans

    "\n==========\n" !println

    "testing stacks" !println
    "-----" !println
    test-stacks

    "\n==========\n" !println

    $ !print " items leftover on the stack: " !println
    $ 0 >
    loop {
        .@
        "   " !print !println
        $ 0 >
    }

    "testing file writing" !println
    "hello darkness, my old friend" "test.txt" write-string
    "status: " !print !println
    "deleting file" !println
    "test.txt" unlink
    0 >= "status: " !print !println
}
