; Example program
import "basic.sbl"
import "io.sbl"

; factorial
fact {
    ; duplicate and compare to zero
    br ^ 0 == {
        ; pop off to nothing, and push a 1
        .@ 1
    }
    el {
        .x       ; pop into x
        x 1 -    ; push a copy and subtract 1 from it
        fact     ; call factorial
        x *      ; multiply whatever our factorial is by x
    }
}

square { ^ * }
cube { ^ ^ * * }

test-numbers {
    1 2 3 4 5
    loop # 0 > {
        ^print " factorial is " !print
        fact !println
    }

    1 2 3 4 5
    loop # 0 > {
        ^print " squared is " !print
        square !println
    }
    
    -1 -2 -3 -4 -5
    loop # 0 > {
        cube "cube is " !print !println
    }

    "printing numbers of different bases" !println

    "0b101010 = " !print 0b101010 !println
    "0o1000 = " !print 0o1000 !println
    "0x1000 = " !print 0x1000 !println
}

test-printing {
    '\n 'o 'l 'l 'e 'h
    loop # 0 > { !print }
    "world!" !println
}

test-booleans {
    -5 ^ .l .r
    br l r == {
        l !print " == " !print r !println
    }

    br l r != { "!!! This should not be printed!" !println }
    elbr l r == { "elbr block" !println }

    br l r != { "!!! This should not be printed!" !println }
    el { "el block" !println }
}

test-stacks {
    ; do weird things with internal stacks
    12 .a 34 .b
    [a b] .c [c 555 [1 2 3]] !println

    [1 2 3 4 5]
    
    loop ^len 0 > {
        ^pop !println
    }

    "I'm going to spell a word!" !println
    []
    's ^push
    'u ^push
    'o ^push
    'u ^push
    'c ^push
    'o ^push
    'n ^push
    'n ^push
    'i ^push
    loop ^len 0 > {
        ^pop !print
    }
    "" !println

    "Here's a number, \"spelled\" out with individual characters from a local stack:" !println
    [ '9 '5 '1 '4 '1 '. '3 ]  ; create a stack with some characters
    loop ^len 0 > {
        ^pop !print  ; pop the top item off the local stack, and print it
    }
    .@ "" !println  ; discard empty stack and print a newline

    ; Yo dawg, I heard you like stacks, so we put stacks in your stacks so you
    ; can stack while you stack
    [
        [1 2]
        [1 3]
        [4 2]
    ]
    "these are the coordinates:" !println
    loop ^len 0 > {
        ^pop  ; get the coordinate
            ^pop !print
            ", " !print
            ^pop !print
        .@
        "" !println
    }
    .@ "" !println

    [ '3 '. '1 '4 '1 '5 '9 ]  ; create a stack with some characters
    ; reverse, reverse
    "this string is being printed out in reverse: " !println
    !reverse
    loop ^len 0 > {
        ^pop !print  ; pop the top item off the local stack, and print it
    }
    .@ "" !println

    [1 2 3] .first
    [4 5 6] .second
    "concatenating these lists: " !print
    first !print " " !print
    second !println
    second first
    !concat
    !println
}

test-baked-calls {
    bake { "running baked functions ..." !println }
    bake {
        "baking factorial call" !println
        6 fact
    }

    "here's a baked factorial: " !print
    !println

    bake {
        "baking basic stack functions" !println
        15
    }
    "here's a baked stack item: " !print
    !println
}

test-strings {

}

run-tests {

    "testing number functions" !println
    "-----" !println
    test-numbers

    "\n==========\n" !println

    "testing printing functions" !println
    "-----" !println
    test-printing

    "\n==========\n" !println

    "testing booleans" !println
    "-----" !println
    test-booleans

    "\n==========\n" !println

    "testing stacks" !println
    "-----" !println
    test-stacks

    "\n==========\n" !println
    
    "testing baked calls" !println
    "-----" !println
    test-baked-calls

    "\n==========\n" !println

    # !print " items leftover on the stack: " !println
    
    loop # 0 > {
        "   " !print !println
    }

    "testing file writing" !println
    "hello darkness, my old friend" "test.txt" write-string
    "status: " !print !println
    "deleting file" !println
    "test.txt" unlink
    0 >= "status: " !print !println
}

main {
    run-tests
}
